# -*- coding: utf-8 -*-
"""SUE_Flask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U40ZB7fg0trrFKNz30mx3OGMYhHWlGDQ

# Safe User Experience (phishing url detection using Flask)

## Virtual Environment forrunning flask
"""

!pip install flask-ngrok

"""## Importing necessary modules"""

from flask_ngrok import run_with_ngrok
from flask import Flask, request, jsonify, render_template
import pickle

"""## Mounting drive"""

from google.colab import drive
drive.mount('/content/drive')

"""## loading model"""

model = pickle.load(open('/content/drive/My Drive/SUE/XGBoostClassifier.pkl', 'rb'))

"""## modules for importing colab notebook"""

!pip install import-ipynb
import import_ipynb
import pandas as pd

"""### changing path"""

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/My Drive/Colab Notebooks/"

"""### Importing Notebook with model and functions"""

import UrlFeatureExtract

"""# Testing functions imported"""

predic = model.predict(pd.DataFrame([UrlFeatureExtract.final("www.google.com")], columns = UrlFeatureExtract.col))
predic.item() == 1

def predict(url):
  url_features = UrlFeatureExtract.final(url)
  model_input = pd.DataFrame([url_features], columns = UrlFeatureExtract.col)
  prediction = model.predict(model_input)
  if prediction.item() == 1:
    return 1
  elif prediction.item() == -1:
    return -1
  else:
    return 0
# print(predict("www.google.com"), file = sys.stdout)
predict("https://lms.wtef.talentsprint.com/login?next=/courses/course-v1%3ATS%2BWE_VC%2B2020/courseware/5398b7f9450c4f15aaebe685d9e4f611/7a94f058abd24455a92cbe77f304d959/")

# app = Flask("Safe_User_Experience", template_folder='/content/drive/My Drive/SUE/templates')
# run_with_ngrok(app)


# @app.route("/")
# def home():
#     return render_template("1.html")

# @app.route("/predict", methods=['POST', 'GET'])
# def predict():
#   url = request.form.values()
#   url_features = URLFeature.final(url)
#   model_input = pd.DataFrame([url_features], columns = URLFeature.col)
#   prediction = model.predict(model_input)
#   if prediction.item() == 1:
#     return render_template("1.html", pred = 'This is a legitimate Website')
#   elif prediction.item() == -1:
#     return render_template("1.html", pred = 'This is a Phishing Website')
#   else:
#     return render_template("1.html", pred = 'This is a suspicious Website')
  

# app.run()

def predict(url):
  # url = request.form.values()
  return model.predict(pd.DataFrame([UrlFeatureExtract.final(url)], columns = UrlFeatureExtract.col))

predict("www.youtube.com")

url = UrlFeatureExtract.final("www.youtube.com")
r = pd.DataFrame([url], columns=UrlFeatureExtract.col)
url

model.predict(r)

"""# Flask Application"""

app = Flask("Safe_User_Experience", template_folder='/content/drive/My Drive/SUE/templates')
run_with_ngrok(app)


@app.route("/")
def home():
    return render_template("1.html")

@app.route("/predict", methods=['POST', 'GET'])
def predict():
  s = request.form.values()
  url = ""
  for i in s:
    url += i
  # print(url)
  url_features = UrlFeatureExtract.final(url)
  # print(url_features)
  model_input = pd.DataFrame([url_features], columns = UrlFeatureExtract.col)
  # print(model_input)
  prediction = model.predict(model_input)
  if prediction.item() == 1:
    return render_template("1.html", pred = 'This is a legitimate Website')
  elif prediction.item() == -1:
    return render_template("1.html", pred = 'This is a Phishing Website')
  else:
    return render_template("1.html", pred = 'This is a suspicious Website')



app.run()