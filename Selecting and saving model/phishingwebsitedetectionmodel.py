# -*- coding: utf-8 -*-
"""PhishingWebsiteDetectionModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EaQKrPiwVaiwiFIAa6poOrwxMYr4AGpy

# **Phishing Website Detection ML model training**

Designing model for creating phishing detection browser extension

# **Importing necessary modules**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""# **Loading Data**"""

data0 = pd.read_csv('/content/drive/My Drive/SUE/data.csv')
data0.head()

"""## **All about data**"""

data0.shape

data0.columns

data0.info()

"""# **Visualizing Data**"""

#correlation heatmap

plt.figure(figsize=(15,13))
sns.heatmap(data0.corr())
plt.show()

"""# **Data Preprocessing**"""

data0.describe()

# checking data for null or missing values
data0.isnull().sum()

# shuffling data for better distribution while model training
data0 = data0.sample(frac=1).reset_index(drop=True)
data0.head()

# droping index it has no significance in model training
data = data0.drop(['index'], axis = 1).copy()

data.head()

# seperating and assigning features and target columns to X and Y
Y = data['Result']
X = data.drop('Result', axis = 1)
X.shape, Y.shape

#splitting the data into train and test sets: 80 - 20 split
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 12)
X_train.shape, X_test.shape, Y_train.shape, Y_test.shape

fl = X_test[1:1]
fl.shape

"""# **Building Models and Training them**"""

#importing packages
from sklearn.metrics import accuracy_score

# Creating holders to store the model performance results
ML_Model = []
accuracy_train = []
accuracy_test = []

#function to call for storing the results
def storeResults(model, a,b):
  ML_Model.append(model)
  accuracy_train.append(round(a, 3))
  accuracy_test.append(round(b, 3))

"""## **K-Nearest Neighbors**"""

# K-Nearest Neighbors model 
from sklearn.neighbors import KNeighborsClassifier

# instantiate the model 
KNN = KNeighborsClassifier(n_neighbors = 5)

# fit the model 
KNN.fit(X_train, Y_train)

#predicting the target value from the model for the samples
Y_test_KNN = KNN.predict(X_test)
Y_train_KNN = KNN.predict(X_train)

#performance test

#computing the accuracy of the model performance
acc_train_KNN = accuracy_score(Y_train,Y_train_KNN)
acc_test_KNN = accuracy_score(Y_test,Y_test_KNN)

print("K-Nearest Neighbors: Accuracy on training Data: {:.3f}".format(acc_train_KNN))
print("K-Nearest Neighbors: Accuracy on test Data: {:.3f}".format(acc_test_KNN))

storeResults('K-Nearest Neighbors', acc_train_KNN, acc_test_KNN)

"""## **Decision Tree Classifier**"""

# Decision Tree model 
from sklearn.tree import DecisionTreeClassifier

# instantiate the model 
tree = DecisionTreeClassifier(max_depth = 5)

# fit the model 
tree.fit(X_train, Y_train)

#predicting the target value from the model for the samples
Y_test_tree = tree.predict(X_test)
Y_train_tree = tree.predict(X_train)

#performance test

#computing the accuracy of the model performance
accuracy_train_tree = accuracy_score(Y_train,Y_train_tree)
accuracy_test_tree = accuracy_score(Y_test,Y_test_tree)

print("Decision Tree: Accuracy on training Data: {:.3f}".format(accuracy_train_tree))
print("Decision Tree: Accuracy on test Data: {:.3f}".format(accuracy_test_tree))

plt.figure(figsize=(9,7))
n_features = X_train.shape[1]
plt.barh(range(n_features), tree.feature_importances_, align='center')
plt.yticks(np.arange(n_features), X_train.columns)
plt.xlabel("Feature importance")
plt.ylabel("Feature")
plt.show()

storeResults('Decision Tree', accuracy_train_tree, accuracy_test_tree)

"""## **Logistic Regression**"""

# Logistic Regression Model
from sklearn.linear_model import LogisticRegression

# instantiate the model
logReg = LogisticRegression(solver='liblinear', penalty='l1')

# fit the model
logReg.fit(X_train, Y_train)

# predicting the target valuesfrom model for the sample
y_test_logReg = logReg.predict(X_test)
y_train_logReg = logReg.predict(X_train)

# Computing the accuracy of model performance
acc_train_logReg =accuracy_score(Y_train, y_train_logReg)
acc_test_logReg = accuracy_score(Y_test, y_test_logReg)

print("Logistic Regression: Accuracy on training Data: {:.3f}".format(acc_train_logReg))
print("Logistic Regression: Accuracy on testing Data: {:.3f}".format(acc_test_logReg))

storeResults('Logistic Regression', acc_train_logReg, acc_test_logReg)

"""## **Random Classifier**"""

# Random Forest model
from sklearn.ensemble import RandomForestClassifier

# instantiate the model
forest = RandomForestClassifier(max_depth=5)

# fit the model 
forest.fit(X_train, Y_train)

# predicting the target values from model for the samples

y_test_forest = forest.predict(X_test)
y_train_forest = forest.predict(X_train)

#computing the accuracy of the model performance
acc_train_forest = accuracy_score(Y_train,y_train_forest)
acc_test_forest = accuracy_score(Y_test,y_test_forest)

print("Random forest: Accuracy on training Data: {:.3f}".format(acc_train_forest))
print("Random forest: Accuracy on test Data: {:.3f}".format(acc_test_forest))

#checking the feature improtance in the model
plt.figure(figsize=(9,7))
n_features = X_train.shape[1]
plt.barh(range(n_features), forest.feature_importances_, align='center')
plt.yticks(np.arange(n_features), X_train.columns)
plt.xlabel("Feature importance")
plt.ylabel("Feature")
plt.show()

storeResults('Random Forest', acc_train_forest, acc_test_forest)

"""## **Multilayer Perceptiontrons (MLPs) : Deep Learning**"""

# Multilayer Perceptrons model
from sklearn.neural_network import MLPClassifier

# instantiate the model
mlp = MLPClassifier(alpha=0.001, hidden_layer_sizes=([100,100,100]))

# fit the model 
mlp.fit(X_train, Y_train)

#predicting the target value from the model for the samples
y_test_mlp = mlp.predict(X_test)
y_train_mlp = mlp.predict(X_train)

#computing the accuracy of the model performance
acc_train_mlp = accuracy_score(Y_train,y_train_mlp)
acc_test_mlp = accuracy_score(Y_test,y_test_mlp)

print("Multilayer Perceptrons: Accuracy on training Data: {:.3f}".format(acc_train_mlp))
print("Multilayer Perceptrons: Accuracy on test Data: {:.3f}".format(acc_test_mlp))

storeResults('Multilayer Perceptrons', acc_train_mlp, acc_test_mlp)

"""## **XGBoost Classifier**"""

#XGBoost Classification model
from xgboost import XGBClassifier

# instantiate the model
xgb = XGBClassifier(learning_rate=0.4,max_depth=7)

#fit the model
xgb.fit(X_train, Y_train)

#predicting the target value from the model for the samples
y_test_xgb = xgb.predict(X_test)
y_train_xgb = xgb.predict(X_train)

#computing the accuracy of the model performance
acc_train_xgb = accuracy_score(Y_train,y_train_xgb)
acc_test_xgb = accuracy_score(Y_test,y_test_xgb)

print("XGBoost: Accuracy on training Data: {:.3f}".format(acc_train_xgb))
print("XGBoost : Accuracy on test Data: {:.3f}".format(acc_test_xgb))

storeResults('XGBoost', acc_train_xgb, acc_test_xgb)

"""## **Support Vector Machines**"""

#Support vector machine model
from sklearn.svm import SVC

# instantiate the model
svm = SVC(kernel='linear', C=1.0, random_state=12)

#fit the model
svm.fit(X_train, Y_train)

#predicting the target value from the model for the samples
y_test_svm = svm.predict(X_test)
y_train_svm = svm.predict(X_train)

# performance evaluation
#computing the accuracy of the model performance
acc_train_svm = accuracy_score(Y_train,y_train_svm)
acc_test_svm = accuracy_score(Y_test,y_test_svm)

print("SVM: Accuracy on training Data: {:.3f}".format(acc_train_svm))
print("SVM : Accuracy on test Data: {:.3f}".format(acc_test_svm))

storeResults('SVM', acc_train_svm, acc_test_svm)

"""# **Model Comparisons**"""

#creating dataframe
results = pd.DataFrame({ 'ML Model': ML_Model, 'Train Accuracy': accuracy_train, 'Test Accuracy': accuracy_test})
results

#Sorting the datafram on accuracy
results.sort_values(by=['Test Accuracy', 'Train Accuracy'], ascending=False)

"""# **Saving and loading model with best accuracy**"""

# save XGBoost model to file
import pickle
pickle.dump(xgb, open("/content/drive/My Drive/SUE/XGBoostClassifier.pkl", "wb"))

# load model from file
loaded_model = pickle.load(open("/content/drive/My Drive/SUE/XGBoostClassifier.pkl", "rb"))
loaded_model